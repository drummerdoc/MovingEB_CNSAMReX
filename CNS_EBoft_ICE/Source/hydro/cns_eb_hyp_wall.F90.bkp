module cns_eb_hyp_wall_module
  use amrex_fort_module, only : rt=>amrex_real
  use amrex_error_module, only : amrex_abort
  implicit none
  private
  public :: compute_hyp_wallflux

contains

  subroutine compute_hyp_wallflux (divw, i,j,k, rho, u, v, w, p, &
       axm, axp, aym, ayp, azm, azp,dx,time)
    use cns_physics_module, only : gamma
    use cns_module, only : smallp, smallr, umx, umy, umz
    use riemann_module, only : analriem
    integer, intent(in) :: i,j,k
    real(rt), intent(in) :: rho, u, v, w, p, axm, axp, aym, ayp, azm, azp
    real(rt), intent(out) :: divw(5)
    real(rt), intent(in) :: time
    real(rt) :: x

    
    real(rt) :: apnorm, apnorminv, anrmx, anrmy, anrmz, un
    real(rt) :: flux(1,1,1,5)
    real(rt) :: velocity, uvel, vvel, wvel, uwall

    apnorm = sqrt((axm-axp)**2 + (aym-ayp)**2 + (azm-azp)**2)

    if (apnorm .eq. 0.d0) then
       print *, "compute_hyp_wallflux: ", i,j,k, axm, axp, aym, ayp, azm, azp
       flush(6)
       call amrex_abort("compute_hyp_wallflux: we are in trouble.")
    end if

    apnorminv = 1.d0 / apnorm
    anrmx = (axm-axp) * apnorminv  ! pointing to the wall
    anrmy = (aym-ayp) * apnorminv
    anrmz = (azm-azp) * apnorminv

    un = u*anrmx + v*anrmy + w*anrmz

    call analriem(gamma, smallp, smallr, 1, 1, 1, 1, &
         [rho], [ un], [p], [0.d0], [0.d0], &  ! fluid
         [rho], [-un], [p], [0.d0], [0.d0], &  ! body
        flux, [1,1,1], [1,1,1], 2,3,4)

      !uvel = 10.0d0
      !vvel = 0.0d0!velocity*(-anrmy)
      !wvel = 0.0d0!velocity*(-anrmz)

	x = 0.0d0+(i+0.5d0)*0.1d0/128
	
	if(x.le.0.075d0 .and. abs(anrmx).gt.1e-6)then
	!uwall=-10.0d0
	uwall=-0.02*3000.0d0/8.0d0*sin(3000.0d0/8.0d0*time)
	!uvel=-10.0d0
	!vvel=0.0d0
	!wvel=0.0d0
	else
	uwall=0.0d0
	!uvel=0.0d0
	!vvel=0.0d0
	!wvel=0.0d0
	endif

	uvel = u - un*anrmx + uwall*anrmx*anrmx
	vvel = v - un*anrmy + uwall*anrmx*anrmy
	wvel = w - un*anrmz + uwall*anrmx*anrmz

	

    divw = 0.d0
    divw(1)   = rho*(uvel*(axm-axp)+vvel*(aym-ayp)+wvel*(azm-azp))
    divw(umx) = (axm-axp)*(p+rho*uvel**2) + (aym-ayp)*rho*uvel*vvel   + (azm-azp)*rho*uvel*wvel
    divw(umy) = (axm-axp)*rho*vvel*uvel    + (aym-ayp)*(p+rho*vvel**2) + (azm-azp)*rho*vvel*wvel
    divw(umz) = (axm-axp)*rho*wvel*uvel   + (aym-ayp)*rho*wvel*vvel   + (azm-azp)*(p+rho*wvel**2)
    divw(5)   = (p+p/0.4d0+0.5d0*rho*(uvel**2+vvel**2+wvel**2))*(uvel*(axm-axp)+vvel*(aym-ayp)+wvel*(azm-azp))	


  end subroutine compute_hyp_wallflux

end module cns_eb_hyp_wall_module
